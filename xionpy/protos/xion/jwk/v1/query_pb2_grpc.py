# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from xion.jwk.v1 import query_pb2 as xion_dot_jwk_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/xion.jwk.v1.Query/Params',
                request_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                _registered_method=True)
        self.AudienceClaim = channel.unary_unary(
                '/xion.jwk.v1.Query/AudienceClaim',
                request_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceClaimRequest.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceClaimResponse.FromString,
                _registered_method=True)
        self.Audience = channel.unary_unary(
                '/xion.jwk.v1.Query/Audience',
                request_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceRequest.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceResponse.FromString,
                _registered_method=True)
        self.AudienceAll = channel.unary_unary(
                '/xion.jwk.v1.Query/AudienceAll',
                request_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryAllAudienceRequest.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryAllAudienceResponse.FromString,
                _registered_method=True)
        self.ValidateJWT = channel.unary_unary(
                '/xion.jwk.v1.Query/ValidateJWT',
                request_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryValidateJWTRequest.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryValidateJWTResponse.FromString,
                _registered_method=True)


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AudienceClaim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Audience(self, request, context):
        """Queries a list of Audience items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AudienceAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateJWT(self, request, context):
        """Queries a list of ValidateJWT items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'AudienceClaim': grpc.unary_unary_rpc_method_handler(
                    servicer.AudienceClaim,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceClaimRequest.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceClaimResponse.SerializeToString,
            ),
            'Audience': grpc.unary_unary_rpc_method_handler(
                    servicer.Audience,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceRequest.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceResponse.SerializeToString,
            ),
            'AudienceAll': grpc.unary_unary_rpc_method_handler(
                    servicer.AudienceAll,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryAllAudienceRequest.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryAllAudienceResponse.SerializeToString,
            ),
            'ValidateJWT': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateJWT,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryValidateJWTRequest.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_query__pb2.QueryValidateJWTResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xion.jwk.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('xion.jwk.v1.Query', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Query/Params',
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AudienceClaim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Query/AudienceClaim',
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceClaimRequest.SerializeToString,
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceClaimResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Audience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Query/Audience',
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceRequest.SerializeToString,
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryGetAudienceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AudienceAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Query/AudienceAll',
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryAllAudienceRequest.SerializeToString,
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryAllAudienceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateJWT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Query/ValidateJWT',
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryValidateJWTRequest.SerializeToString,
            xion_dot_jwk_dot_v1_dot_query__pb2.QueryValidateJWTResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
