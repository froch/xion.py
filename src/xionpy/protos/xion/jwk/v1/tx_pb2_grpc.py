# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from xion.jwk.v1 import tx_pb2 as xion_dot_jwk_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAudienceClaim = channel.unary_unary(
                '/xion.jwk.v1.Msg/CreateAudienceClaim',
                request_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceClaim.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceClaimResponse.FromString,
                _registered_method=True)
        self.DeleteAudienceClaim = channel.unary_unary(
                '/xion.jwk.v1.Msg/DeleteAudienceClaim',
                request_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceClaim.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceClaimResponse.FromString,
                _registered_method=True)
        self.CreateAudience = channel.unary_unary(
                '/xion.jwk.v1.Msg/CreateAudience',
                request_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudience.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceResponse.FromString,
                _registered_method=True)
        self.UpdateAudience = channel.unary_unary(
                '/xion.jwk.v1.Msg/UpdateAudience',
                request_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgUpdateAudience.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgUpdateAudienceResponse.FromString,
                _registered_method=True)
        self.DeleteAudience = channel.unary_unary(
                '/xion.jwk.v1.Msg/DeleteAudience',
                request_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudience.SerializeToString,
                response_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceResponse.FromString,
                _registered_method=True)


class MsgServicer(object):
    """Msg defines the Msg service.
    """

    def CreateAudienceClaim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAudienceClaim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAudienceClaim': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAudienceClaim,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceClaim.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceClaimResponse.SerializeToString,
            ),
            'DeleteAudienceClaim': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAudienceClaim,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceClaim.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceClaimResponse.SerializeToString,
            ),
            'CreateAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAudience,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudience.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceResponse.SerializeToString,
            ),
            'UpdateAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAudience,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgUpdateAudience.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgUpdateAudienceResponse.SerializeToString,
            ),
            'DeleteAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAudience,
                    request_deserializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudience.FromString,
                    response_serializer=xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xion.jwk.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('xion.jwk.v1.Msg', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service.
    """

    @staticmethod
    def CreateAudienceClaim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Msg/CreateAudienceClaim',
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceClaim.SerializeToString,
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceClaimResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAudienceClaim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Msg/DeleteAudienceClaim',
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceClaim.SerializeToString,
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceClaimResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Msg/CreateAudience',
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudience.SerializeToString,
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgCreateAudienceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Msg/UpdateAudience',
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgUpdateAudience.SerializeToString,
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgUpdateAudienceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xion.jwk.v1.Msg/DeleteAudience',
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudience.SerializeToString,
            xion_dot_jwk_dot_v1_dot_tx__pb2.MsgDeleteAudienceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
